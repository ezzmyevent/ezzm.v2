# .cursorrules — MASTER Cursor rules for EzzMyEvent CRM (Laravel)
# Version: 1.3
# Purpose: Single-source-of-truth gating policy for humans + Cursor agents working on the EzzMyEvent CRM
# Notes:
#  - Combines general legacy-Laravel safety rules with project-specific guards (API/web/admin/cron split).
#  - References: CRM architecture and route docs.   
#
# Use: place at repo root as .cursorrules. Cursor agents and developers must follow this before suggesting or applying code changes.

version: "1.3"
name: "ezzmyevent-cursorrules-master"
summary: |
  Safe, reversible, test-backed, non-destructive change policy for the EzzMyEvent legacy Laravel CRM
  (attendee management, badge/QR printing, admin panel, micro-features). Enforce small diffs, automated
  checks, staging, and mandatory human review for all changes. Project-aware: respects api/web/admin/cron split.

meta:
  owners:
    - name: "Shlok Aggrawal"
      role: "Founder"
      contact: "shlok0531@gmail.com"
  repo-root: "."
  primary-branch: "develop"
  protected-branches:
    - "main"
    - "production"
  languages:
    - php
    - javascript
    - blade
  php-minimum: "8.1"
  laravel-supported: true
  refs:
    - "CRM architecture: CRM_Architecture_Documentation.md". 
    - "Routes listing: Old_CRM_Route.md". 
    - "Scheduler/cron recommendations". 

########################################################################
# PRINCIPLE — Single sentence mandate
########################################################################
principle: |
  Always: Understand -> Test (automated) -> Change (small & reversible) -> Verify (staging + monitored), before merging any change to protected branches.

########################################################################
# ENFORCEMENT (mandatory rules)
########################################################################
enforcement:
  - id: E-001
    title: "No direct edits to protected branches"
    description: |
      Cursor agents and CI must NOT push or merge directly into protected branches (main/production).
      All changes must be via feature/topic branches with PRs targeting `develop` or `staging`.
      Human approval required for merges to protected branches.
    severity: must

  - id: E-002
    title: "Small atomic changes only"
    description: |
      Each PR must implement a single logical change: bug fix, small feature, or a single-step refactor.
      Target <= 300 LOC changed for typical changes. Anything larger must be split into incremental PRs.
    severity: must

  - id: E-003
    title: "Tests required (red -> green)"
    description: |
      For every bugfix or behavioral change, add an automated test that fails before the fix and passes after.
      New features require feature/acceptance tests. No behavioral change is merged without test coverage.
    severity: must

  - id: E-004
    title: "Static analysis + style"
    description: |
      All PRs must pass static analysis (phpstan or psalm at repo-configured level) and coding style (php-cs-fixer / phpcs PSR-12).
      New PHP files should include `declare(strict_types=1);` and prefer typed properties & return types where safe.
    severity: must

  - id: E-005
    title: "Staging verification + smoke tests"
    description: |
      Changes merged into `develop` must auto-deploy to staging. PR author must include smoke-test steps applicable to changed area.
      Critical paths must be smoke-tested on staging before production merge.
    severity: must

  - id: E-006
    title: "DB migration safety"
    description: |
      All migrations must be backward-compatible. Destructive changes require a two-phase deploy:
        1) Add new columns/flags (nullable/add non-breaking schema) and deploy.
        2) Change code to use new columns and backfill data; then drop old columns in a later release.
      For large tables, plan non-blocking index creation or maintenance windows and document expected lock times.
    severity: must

  - id: E-007
    title: "Human review mandatory for agent suggestions"
    description: |
      Any change generated by an agent (Cursor or otherwise) must be reviewed and approved by a human engineer.
      Agent-produced diffs must include tests, risk assessment, and rollback steps.
    severity: must

  - id: E-008
    title: "No bulk AI refactors without plan"
    description: |
      Agents must not produce bulk refactors (touching >10 files or >1000 LOC) in a single PR without explicit human authorization and an incremental migration plan.
    severity: must

########################################################################
# PROJECT-SPECIFIC SCOPE & STRUCTURE (where rule applies)
########################################################################
scope: |
  Applies to:
    - routes/* (api.php, web.php, channels.php, console.php)
    - app/Http/Controllers/ (Api/, Admin/, Web/)
    - app/Models/, app/Services/, app/Repositories/
    - app/Console/, app/Jobs/, app/Notifications/
    - database/migrations, seeds
    - CI/CD, scheduler (app/Console/Kernel.php), cron endpoint handlers
  See architecture docs for route lists and controller mapping. 

########################################################################
# MANDATORY STEPS BEFORE ANY CHANGE (highly prescriptive)
########################################################################
mandatory-steps-before-any-change:
  - step: "Collect context (must)"
    must: true
    details: |
      Collect and attach the following to the PR description or agent prompt:
        - `php -v` output and `php artisan --version` output
        - `composer.lock` excerpt (or list of changed packages)
        - Contents/paths: routes file(s) touching the change (`routes/api.php` / `routes/web.php` / routes/feature files)
        - Controller(s), Model(s), Service(s) involved (full paths)
        - app/Console/Kernel.php if cron/scheduler-related
        - Reproduction steps and sample request/payload (for bugs)
      If these are not available in workspace, the agent must request them and not proceed.

  - step: "Map critical business paths (must)"
    must: true
    details: |
      Identify which critical paths might be affected and include smoke-test steps:
        - web login + OTP flows
        - API login/token flows
        - attendee registration + checkout
        - badge generation & m-badge retrieval
        - zapping/entry validation + concurrency
        - delegate kit allotment
        - CSV import/export flows
        - scheduled email/WhatsApp dispatch
      Add a short 'affected flows' list in PR.

  - step: "Decide route surface & middleware (must)"
    must: true
    details: |
      Confirm whether the endpoint belongs to:
        - `routes/api.php` — stateless API (use token auth / sanctum)
        - `routes/web.php` — session + CSRF flows
        - `routes/admin.php` or `app/Http/Controllers/Admin/*` — admin guard and RBAC
      Avoid mixing API endpoints into web routes. For new scheduled work, prefer Artisan commands & scheduler rather than public HTTP cron endpoints.

########################################################################
# CORE RULES (generic + project-specific merged)
########################################################################
core-rules:
  - id: C-001
    title: "Route-file discipline"
    rule: |
      - Keep stateless JSON endpoints in `routes/api.php` and name with versioning (`/api/v1/...`) if future changes expected.
      - Keep session-based flows and Blade page routes in `routes/web.php`.
      - Admin routes must live under an `admin` route group and require `auth:admin` or `adminauth` middleware.
      - If a mobile app needs the same endpoint and session is not available, prefer token-based API instead of duplicating web routes.
    rationale: "Reduces accidental CSRF/session mismatches and makes auth boundary explicit."

  - id: C-002
    title: "Controllers & Services"
    rule: |
      - Controllers should be thin; business logic must live in Services/Actions under `app/Services/` or `app/Actions/`.
      - Controller methods should be small, validate input via Form Requests, call a service, and return resources/JSON/redirects.
      - Services should be testable via dependency injection and use interfaces for external side-effects (printing API, 3rd-party SMS/WhatsApp).
    rationale: "Improves testability and isolates side effects."

  - id: C-003
    title: "Admin area protection"
    rule: |
      - Changes touching `app/Http/Controllers/Admin/*` or `/admin/*` routes require explicit statement of impact on exports/imports and CSV templates.
      - Require a senior dev + QA approval for merging admin-area changes.
      - Enforce RBAC for admin-level actions (recommend using spatie/laravel-permission).
    citation: "See routes doc for admin flow mapping." 

  - id: C-004
    title: "Cron & scheduler safety"
    rule: |
      - Prefer converting any public cron endpoints into Artisan commands scheduled in `app/Console/Kernel.php`.
      - If an HTTP endpoint must be used for triggering, protect it using signed URLs, IP whitelist, or a secret header + rate limiting.
      - Document scheduler mapping in PR and ensure commands have idempotent behavior.
    citation: "Move `/api/sendmbadge_whatsapp` or similar to scheduled commands." 

  - id: C-005
    title: "Export/Import & bulk data rules"
    rule: |
      - Any change to CSV/XLS import templates or parsing logic must include:
          1) a sample fixture file under tests/fixtures/,
          2) idempotent import tests,
          3) a strategy for partial failure and rollback,
          4) queued processing for large files with progress tracking.
      - Export endpoints must stream outputs and avoid blocking; use queues if needed.
    citation: "Bulk CSV flows are high-risk — include rollback/data-backup steps." 

  - id: C-006
    title: "Zapping / Entry endpoints (high-risk)"
    rule: |
      - Zapping endpoints and related models (EntryZapping, EntryZapHistory) are critical: ensure idempotent operations, concurrency control, and DB uniqueness constraints to prevent double-entries.
      - Provide integration tests simulating concurrent scans (multiple requests at once).
      - Feature-flag new behaviors and provide manual toggle for emergency rollback.
    citation: "High-consequence — treat with extra QA and integration tests." 

  - id: C-007
    title: "Backwards compatibility for public APIs"
    rule: |
      - Public API changes require versioning (e.g., /api/v1/ -> /api/v2/) with clear deprecation notes.
      - Avoid breaking changes in the same release as consumers; coordinate with mobile/web clients.

########################################################################
# REFRACTOR GUIDELINES (how-to safe refactors)
########################################################################
refactor-guidelines:
  - step: "Lock behavior with tests first"
    details: "Write unit/feature tests that cover current behavior before refactor."
  - step: "Create tests-only PR"
    details: "If behavior lacks tests, first create a small PR that adds tests that fail on the current code (regression tests)."
  - step: "Refactor incrementally"
    details: "Make small refactor PRs (one responsibility at a time). Each PR must pass tests and static checks."
  - step: "Don't change public interfaces & internals simultaneously"
    details: "If you must change a public interface, do it in one PR that adds compatibility layer, and depose the old interface in a later PR."

########################################################################
# CI / TESTING / SMOKE (gates)
########################################################################
testing-and-ci:
  ci-gates:
    - phpunit: "Unit + Feature tests; coverage target as configured in repo"
    - static-analysis:
        - phpstan: "repo-level configured level"
        - psalm: "optional; use if configured"
    - code-style:
        - php-cs-fixer: "PSR-12"
        - phpcs: "PSR-12 checks"
    - security-scan:
        - composer-audit: "or Snyk if configured"
  required-ci-status: "All CI gates must be green before merging to `develop` or protected branches."
  smoke-tests (to run on staging after deploy):
    - "web login + OTP: steps and expected results"
    - "attendee booking + checkout: quick end-to-end with sample user"
    - "m-badge retrieval & download: fetch for sample attendee"
    - "zapping scan success/failure: simulated scans including duplicates"
    - "admin CSV import/export: run small sample import and verify"
    - "scheduled commands: run single-cycle of email/WhatsApp dispatch"
  note: |
    PR authors must include quick commands to run smoke-tests for the changed area and document which ones they executed on staging.

########################################################################
# DATABASE & MIGRATIONS (detailed)
########################################################################
database-and-migrations:
  - id: DB-1
    rule: "Two-phase deploy rule (mandatory)"
    description: |
      1) Add new column(s) or flags as nullable/default so old code continues to function.
      2) Deploy and run backfills in a safe job (queued if large).
      3) Update code to start using the new column(s) behind a feature flag.
      4) After monitoring and verification, make column non-nullable and/or drop the old column in a follow-up release.
    examples: |
      - "Add `new_status` column nullable -> backfill with job -> switch code to `new_status` -> drop `old_status` later."

  - id: DB-2
    rule: "Index and long-running ops"
    description: |
      For large-table schema changes (index creation, column type change), prefer:
        - non-blocking index techniques (DB-specific) OR
        - schedule during maintenance window OR
        - use physical copy+swap pattern (create new table, backfill, swap)
      Always include expected lock time in PR and fallback plan.

  - id: DB-3
    rule: "Migration testing"
    description: |
      Run migrations on staging with sample dataset and verify zero data loss. Include rollback test if possible (snapshot/backup).

########################################################################
# SECURITY & PRIVACY
########################################################################
security-and-privacy:
  - "Sanitize and validate all inputs using Form Requests and policies where appropriate."
  - "Encrypt PII at rest where required and ensure access controls/logging for PII actions."
  - "Keep API tokens, secrets and credentials out of code. Use environment variables and secret managers."
  - "Ensure CSRF protections enabled for web forms; escape outputs in Blade templates to prevent XSS."
  - "Protect any public cron endpoints using signed URLs, secret headers, IP whitelisting, and rate limiting."
  - "Enforce API authentication: choose auth strategy per client (sanctum, JWT, token) and document in PR."

########################################################################
# CURSOR AGENT (AI) RULES — strict
########################################################################
cursor-agent-rules:
  - id: A-001
    title: "Agent context requirement (must)"
    description: |
      Before producing any code suggestion or patch, the agent must obtain and attach the "required context bundle":
        - exact route file(s) involved (routes/api.php or routes/web.php)
        - controller(s) full path(s), model(s), service(s) for the area
        - composer.lock excerpt
        - app/Console/Kernel.php if scheduler/cron related
        - reproduction steps & sample payloads (for bugs)
      If workspace lacks these, agent must request them and not proceed.

  - id: A-002
    title: "Diff-only output (must)"
    description: |
      Agents must output git-format patches / unified diffs or create a PR branch — never commit or merge directly to develop/main.
      All output must include:
        - short rationale
        - risk assessment (low/medium/high)
        - files changed list
        - tests added (and command to run them)
        - migration/backfill instructions (if any)
      Agents must not hide or obfuscate changes.

  - id: A-003
    title: "Test generation (must)"
    description: |
      For any behavioral change (bugfix/new behavior), agent must generate automated tests (PHPUnit feature/unit) that fail before the fix and pass after.
      Provide test names, locations under tests/, and commands to run: `php artisan test --filter=TestName`.

  - id: A-004
    title: "Non-destructive migration guidance (must)"
    description: |
      If a migration is necessary, provide a safe two-step migration plan including backfill job code samples, estimate of lock time, and suggested maintenance windows.

  - id: A-005
    title: "No bulk refactors (must)"
    description: |
      Agents must not propose or create refactors touching >10 files or >1000 LOC in one PR. Break large changes into a plan with incremental PRs.

  - id: A-006
    title: "Project style fidelity (must)"
    description: |
      When producing code, match the project's coding style and patterns. Agents should sample existing files from the target module to mirror naming, DI patterns, and exceptions handling.

  - id: A-007
    title: "Patch metadata & smoke-tests (must)"
    description: |
      Each agent patch must include explicit smoke-test steps and the critical flows exercised on staging (see 'Map critical business paths').

  - id: A-008
    title: "Maximum change budget (must)"
    description: |
      Agents must never propose a single PR that modifies more than 20 files or 2000 LOC without explicit human authorization and a written rollback plan referenced in the PR.

########################################################################
# DOCUMENTATION REQUIREMENTS (must accompany PR)
########################################################################
documentation-requirements:
  - files-changed-and-why: "List all files and short rationale for each change"
  - route-changes: "List routes added/modified and state whether web/api/admin and middleware"
  - affected-flows: "Mention which critical flows are affected and smoke-test steps"
  - migrations: "Migration/backfill plan and estimated time/lock impact"
  - security-review: "Notes about exposed endpoints and protections (signed URLs, guards, RBAC)"
  - test-summary: "List of new tests and how they exercise changed behavior"
  - rollout-plan: "Feature flag usage (if any), staging verification, gradual rollout guidance"

########################################################################
# PR TEMPLATE (to paste into PR body)
########################################################################
pr-template: |
  ### Summary
  - Short description of change:
  - Related issue/bug:

  ### Context (required)
  - Laravel version: (from `php artisan --version`)
  - PHP version: (from `php -v`)
  - Composer packages changed: (yes/no; list)
  - Files changed (high-level):

  ### Affected critical flows (list)
  - e.g. login (web), attendee booking, badge retrieval, zapping, admin CSV import

  ### Tests
  - New tests added:
    - tests/Feature/...
    - tests/Unit/...
  - How to run locally:
    - `composer install`
    - `php artisan migrate --env=staging --step`
    - `php artisan test --filter=YourTestName`

  ### Migrations
  - Migrations included: yes/no
  - Backwards-compat plan (if applies):
  - Backfill instructions (if any):

  ### Risk & Rollback
  - Risk: low / medium / high
  - Rollback plan: (git revert, DB restore, feature flag off steps)

  ### Smoke Tests (staging steps)
  - Step 1...
  - Step 2...

  ### Checklist
  - [ ] Unit/Feature tests added and passing
  - [ ] Static analysis passes
  - [ ] php-cs-fixer / phpcs applied
  - [ ] Deployed to staging and smoke-tested
  - [ ] Reviewed & approved by senior dev + QA

########################################################################
# AGENT PROMPT TEMPLATES (copy-paste safe)
########################################################################
agent-prompt-templates:
  analyze-area: |
    You are an expert Laravel developer. I will provide:
      - controller file(s)
      - model(s)
      - service(s)
      - route(s)
      - composer.lock excerpt
      - reproduction steps (if bug)
    Task:
      1) Explain the code flow in 3-8 bullets.
      2) List 3 potential risks of changing this area.
      3) Propose a minimal safe change (single-file/small diff) to implement X.
      4) Generate one or more failing tests that demonstrate the bug (if applicable).
      5) Provide commands to run tests and linters.
    Constraints:
      - Do NOT modify >5 files in the proposed patch.
      - Use existing project patterns and DI.
      - Provide a risk assessment and rollback plan.

  make-patch: |
    You are an expert Laravel developer. Create a git-format patch with only the necessary changes.
    Include:
      - Unified diff / patch file
      - Brief rationale & risk assessment
      - New PHPUnit tests (file path + test name)
      - Commands to run tests and linters locally
      - Migration/backfill plan (if applies)
    DO NOT merge or push to protected branches.

########################################################################
# OPERATIONAL APPENDIX (copyable commands + examples)
########################################################################
operational-appendix:
  quick-commands:
    - "git checkout -b feature/<short-description>"
    - "composer install --no-interaction"
    - "php artisan migrate --env=staging --step"
    - "php artisan test"
    - "vendor/bin/phpstan analyse"
    - "vendor/bin/php-cs-fixer fix --dry-run"
    - "vendor/bin/phpunit --filter=YourTestName"
  smoke-test-commands:
    - "curl -X POST 'https://staging.example.com/api/v1/login' -d '{...}'"
    - "php artisan schedule:run --verbose --no-interaction" # run scheduled tasks once on staging
    - "php artisan queue:work --once" # process queued jobs
  test-fixtures:
    - "Place sample import CSV fixtures under tests/fixtures/imports/ and reference them in tests."
  example-checklist-for-zapping-change:
    - "Add integration test simulating 5 concurrent scan requests"
    - "Add DB unique constraint to prevent duplicates"
    - "Wrap scan action in DB transaction with optimistic locking"
    - "Feature flag the new flow"

########################################################################
# EXCEPTIONS & EMERGENCY PROCEDURES
########################################################################
exceptions:
  emergency-hotfix:
    allowed: true
    approval: "Must have explicit approval from a repository owner (meta.owner) or senior dev."
    post-facto-requirements: |
      After applying emergency fix directly to production (only when absolutely necessary),
      open a post-facto PR that:
        - describes the change and justification,
        - adds tests to cover the change within 24 hours,
        - documents migrations/backfills and monitoring results.

  rule-changes:
    process: |
      Changes to .cursorrules itself must be approved by repository owners.
      Version the file and include change rationale in the PR.

########################################################################
# ENFORCEMENT & MONITORING (post-merge)
########################################################################
enforcement-monitoring:
  - "Every production deploy triggered from main must start a 30-minute monitoring window for logs, queue metrics, error rates, and printing throughput."
  - "If error rates exceed configured thresholds, trigger rollback per PR rollback plan."
  - "Record post-deploy verification results in PR comments."

########################################################################
# FINAL NOTE (developer mantra)
########################################################################
final-note: |
  Treat this as the authoritative policy: "Understand → Test → Change → Verify".
  When uncertain, create a small, well-tested patch and ask for human review rather than performing large, speculative edits.
  For high-risk modules (zapping, badge printing, CSV imports, cron jobs, admin exports), assume higher scrutiny and additional QA.

# End of .cursorrules